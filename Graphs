
// for moving up, down, left and right
        int[][] dir = {{-1,0}, {1, 0}, {0,-1}, {0,1}};


// BFS snippet
        ArrayList<Integer> bfs = new ArrayList<>();
        int[] visited = new int[V]; 
        Queue<Integer> q= new LinkedList<>();
        q.add(0);
        visited[0]=1;
        while(!q.isEmpty()){
            int item = q.poll();
            bfs.add(item);
            for(int x: adj.get(item)){
                if(visited[x]==0) {
                visited[x]=1;
                q.add(x);
                }
            }
        }
        return bfs;


// dfs of graph 
        private ArrayList<Integer> res = new ArrayList<>();
        private void dfs(int node, boolean[] visited, ArrayList<ArrayList<Integer>> adj){
            visited[node]=true;
            res.add(node);
            for(int x: adj.get(node)){
                if(!visited[x]) dfs(x, visited, adj);
            }
        }
        public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
            boolean[] visited = new boolean[V];
            dfs(0, visited, adj);
            return res;
        }



//Dijkstra Algorithm implementation using priority Queue

class Solution
{
    static class Pair{
        int distance, vertex;
        Pair(int distance, int vertex){
            this.distance=distance;
            this.vertex=vertex;
        }
    }

    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        int[] shortestPath = new int[V];
        for(int i=0; i<V; i++) shortestPath[i]=Integer.MAX_VALUE;
        PriorityQueue<Pair> pq = new PriorityQueue<>((x,y)-> (x.distance-y.distance));
        pq.add(new Pair(0, S));
        shortestPath[S]=0;
        while(!pq.isEmpty()){
            Pair node=pq.poll();
            for(ArrayList<Integer> list: adj.get(node.vertex))
                if(node.distance+list.get(1) < shortestPath[list.get(0)]){
                    shortestPath[list.get(0)] = node.distance+list.get(1);
                    pq.add(new Pair(shortestPath[list.get(0)], list.get(0)));
                }
        }
        return shortestPath;
    }
}


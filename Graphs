
//Dijkstra Algorithm implementation using priority Queue

class Solution
{
    static class Pair{
        int distance, vertex;
        Pair(int distance, int vertex){
            this.distance=distance;
            this.vertex=vertex;
        }
    }

    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        int[] shortestPath = new int[V];
        for(int i=0; i<V; i++) shortestPath[i]=Integer.MAX_VALUE;
        PriorityQueue<Pair> pq = new PriorityQueue<>((x,y)-> (x.distance-y.distance));
        pq.add(new Pair(0, S));
        shortestPath[S]=0;
        while(!pq.isEmpty()){
            Pair node=pq.poll();
            for(ArrayList<Integer> list: adj.get(node.vertex))
                if(node.distance+list.get(1) < shortestPath[list.get(0)]){
                    shortestPath[list.get(0)] = node.distance+list.get(1);
                    pq.add(new Pair(shortestPath[list.get(0)], list.get(0)));
                }
        }
        return shortestPath;
    }
}


Different patterns of Dynamic programming 
-> 0/1 Knapsack 
    1. 0/1 knapsack 
        int knapSack(int W, int wt[], int val[], int n) { 
            int[][] dp = new int[W+1][n+1];
            for(int i=1; i<W+1; i++){
                for(int j=1;j<n+1; j++){
                    if(wt[j-1]<=i)
                        dp[i][j]= Math.max(val[j-1] + dp[i-wt[j-1]][j-1], dp[i][j-1]);
                    else dp[i][j]= dp[i][j-1];
                }
            }
            return dp[W][n];
        }

            
    2. subset sum 
            for(int i=1; i<N+1; i++){
                for(int j=1; j<sum+1; j++){
                    if(arr[i-1]>j) currSumPossible[j]=prevSumPossible[j];
                    else currSumPossible[j]= prevSumPossible[j] || prevSumPossible[j-arr[i-1]]; 
                }
                prevSumPossible=Arrays.copyOf(currSumPossible, currSumPossible.length);
            }


    3. partition equal subset sum 
            s1+s1=totalsum
            s1=totalsum/2 (apply subset-sum)


	4. count no. of subsets of the given sum
            if(arr[i-1]>j) currSumPossible[j]=prevSumPossible[j];
            else currSumPossible[j]= prevSumPossible[j] + prevSumPossible[j-arr[i-1]]; 
        
    5. The difference of subsets should be the target 
            s1-s2=target, s1+s2=sum
            s2=sum-target (apply subset-sum)

    6. Target sum: https://leetcode.com/problems/target-sum/
            s1 = sum of +ve, s2 = |sum of -ve| 
            s1-s2=target, s1+s2=totalsum
            s1 = (totalsum-target)/2   (apply subset-sum)


-> Unbounded Knapsack
  

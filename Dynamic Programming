Different patterns of Dynamic programming 
-> 0/1 Knapsack 
		O(N*Sum), O(N*sum) 
	        int knapSack(int W, int wt[], int val[], int n) { 
	            int[][] dp = new int[W+1][n+1];
	            for(int i=1; i<W+1; i++)
	                for(int j=1;j<n+1; j++){
	                    if(wt[j-1]<=i)
	                        dp[i][j]= Math.max(val[j-1] + dp[i-wt[j-1]][j-1], dp[i][j-1]);
	                    else dp[i][j]= dp[i][j-1];
	                }
	            return dp[W][n];
	        }
	//space complexity can be reduced using two arrays(curr, prev)
            
    1. subset sum O(N*Sum), O(sum)
            for(int i=1; i<N+1; i++){
                for(int j=1; j<sum+1; j++){
                    if(arr[i-1]>j) currSumPossible[j]=prevSumPossible[j];
                    else currSumPossible[j]= prevSumPossible[j] || prevSumPossible[j-arr[i-1]];     
                }
                prevSumPossible=Arrays.copyOf(currSumPossible, currSumPossible.length);
            }
	//if we can traverse from the end in the sum loop we can do this using single array

    2. count no. of subsets of the given sum - O(N*Sum), O(sum)
	        for(int num:nums)
	            for(int j=target; j>=num; j--)
	                count[j] += count[j-num];   

    3. partition equal subset sum - O(N*Sum), O(sum)
            s1+s1=totalsum
            s1=totalsum/2 (apply subset-sum)
        
    4. The difference of subsets should be the target - O(N*Sum), O(sum)
            s1-s2=target, s1+s2=sum
            s2=sum-target (apply subset-sum)

    5. Target sum - O(N*Sum), O(sum)
            s1 = sum of +ve, s2 = |sum of -ve| 
            s1-s2=target, s1+s2=totalsum
            s1 = (totalsum-target)/2   (apply subset-sum)


-> Unbounded Knapsack - O(N*Sum), O(sum)
	 		if(wt[i-1]>j) maxProfit[j]=maxProfit[j];
         		else maxProfit[j]=Math.max(maxProfit[j], maxProfit[j-wt[i-1]] + val[i-1]);
	
	1. coin change(minimum no. of coins) - O(N*Sum), O(sum)
			for(int i=1; i<amount+1;  i++) minCoins[i]=Integer.MAX_VALUE-1;
		        for(int coinsConsidered=1; coinsConsidered<typesOfCoins+1; coinsConsidered++)
		            for(int amountConsidered=1; amountConsidered<amount+1; amountConsidered++){
		                if(coins[coinsConsidered-1]>amountConsidered) 
		                    minCoins[amountConsidered]=minCoins[amountConsidered];
		                else
		                    minCoins[amountConsidered]=Math.min(minCoins[amountConsidered], 
		                                    1 + minCoins[amountConsidered-coins[coinsConsidered-1]]) ; 
		        	}
		    return minCoins[amount]>Integer.MAX_VALUE-2?-1:minCoins[amount];

	2. coin change 2(count the ways) - O(N*Sum), O(sum)
			for(int coinValue:coins)
				for(int amountConsidered=coinValue; amountConsidered<amount+1; amountConsidered++)
					minCoins[amountConsidered] += minCoins[amountConsidered-coinValue] ; 


	3. rod cutting (max profit) - O(N*Sum), O(sum)
		same as knapsack unbounded


-> Longest Common Subsequence
			public int longestCommonSubsequence(String text1, String text2) {
		        int m=text1.length(), n=text2.length(), length;
		        int[] prev=new int[n+1];
		        int[] curr=new int[n+1];
		        for(int i=1; i<m+1; i++){
		            for(int j=1; j<n+1; j++){
		                if(text1.charAt(i-1)==text2.charAt(j-1)) curr[j]=1+prev[j-1];
		                else curr[j]=Math.max(curr[j-1], prev[j]);
		            }
		            prev=Arrays.copyOf(curr, curr.length);
		        }
		        return curr[n];
		    }




	
	
  
